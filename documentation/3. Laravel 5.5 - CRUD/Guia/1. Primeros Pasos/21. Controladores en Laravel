21. Controladores en Laravel

Notas:
======

Los controladores son un mecanismo que nos permite agrupar la lógica de peticiones HTTP relacionadas y de esta forma organizar mejor nuestro código. En esta quinta seccion de la presente guía de Laravel desde cero aprenderemos a hacer uso de ellos y veremos además cómo las pruebas unitarias nos permiten verificar los cambios que introducimos en nuestro código de forma fácil y rápida.


Generar un controlador
----------------------

Generamos un nuevo controlador con el comando de Artisan make:controller pasándole el nombre que queremos darle. En el ejemplo el nombre es UserController:

	> php artisan make:controller UserController

Hecho esto, en el directorio app/Http/Controllers tendremos nuestro controlador UserController.

Métodos en el controlador
-------------------------

Un controlador no es más que un archivo .php con una clase que extiende de la clase App\Http\Controllers\Controller:
--
	<?php
	namespace App\Http\Controllers;
	class UserController extends Controller {
	     // ...
	}
--

Extender de la clase Controller es opcional, sin embargo es recomendado porque se brindará varios métodos útiles que se veran más adelante.

Dentro de esta clase (en nuestro caso UserController) agregamos nuestros métodos públicos (llamados acciones), que después podemos enlazar a una ruta:

--
	public function index()
	{
	    return 'Usuarios';
	}
--


Enlazar una ruta a un controlador
---------------------------------

Para enlazar una ruta a un controlador pasamos como argumento el nombre del controlador y del método que queremos enlazar, separados por un @. En este caso queremos enlazar la ruta /usuarios al método index del controlador UserController:
--
	Route::get('/usuarios', 'UserController@index');
--


Controlador de un solo método
-----------------------------

Si quieres tener un controlador que solo tenga una acción, puedes hacerlo llamando al método __invoke, por ejemplo:
--
	public function __invoke($name, $nickname = null)
	{
	    // ...
	}
--

En nuestra ruta ahora podemos enlazar directamente al controlador:
--
	Route::get('/saludo/{name}/{nickname}', 'WelcomeUserController');
--


Practica
=========

Hasta el actual punto de la presente guia se han estado escribiendo las rutas en 
	web.php

escribiendo la logica de las rutas directamente en el archivo de rutas y por logica en realidad la logica de estas rutas estan etornando una cadena de texto, exepto la ultima ruta siguiente:
---
Route::get('/saludo/{name}/{nickname?}', function($name, $nickname = null){

        $name = ucfirst($name);

        if ($nickname){
            return "Bienvenido {$name}, tu nombre clave es: {$nickname}";
        }else{
            return "Bienvenido {$name}";
        }
    });
 ---

 Donde se tiene entonces un condicional es decir un poco mas de logica, sin embargo como puede verse en el archivo de rutas ya no se ve tan limpio y como podra uno imaginarse en un proyecto mas complejo este archivo podria llegar con este ritmo a tener cientos o hasta miles de lineas de codigo. Ademas nosotros estamos utilizndo un Framework con la idea de organizar mejor nuestro proyecto, no de escribir toda la logica en un solo archivo.

 Para solucionar este probema muchos Framewroks como Laravel incluyen una capa llamada controllers con controladores, los cuales son basicamente un mecanismo con el cual vamos a poder agripar peticiones http relacionadas dentro de una clase y dividirlas en varios metodos. Para generar un nuevo controlador con Larael es muy sencillo, desde la terminal:
 Ej.
 	> php artisan make:controller <controller_name>

Pero antes de hacer esto vamos a jecutar las pruebas para comprobar que el proyecto que en este punto antes de comenzar a trabajr esta funcionando.

Ahora si vamos a generar un nuevo controlador con el nombre UserController
	> php artisan make:controller UserController

Y regresando al editor en la ruta:

	/app/Http/Controllers/

Se tiene un nuevo controlador 
	/app/Http/Controllers/UserController.php









Ejercicios
========


Mueve el código de la ruta para editar usuarios que creaste en el ejercicio de la lección pasada, a una nueva acción edit dentro de UserController. Utiliza una prueba automatizada para verificar que has hecho el cambio correctamente.

Desafío adicional: divide la ruta de saludo en 2 rutas diferentes que apunten a 2 acciones diferentes, para de esta manera eliminar la necesidad de un condicional y el parámetro opcional. Utiliza la prueba automatizada para verificar que has hecho el cambio correctamente.